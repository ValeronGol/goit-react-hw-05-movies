{"version":3,"sources":["services/apiMovie.js","components/FilmCard/FilmCard.styled.jsx","components/FilmCard/FilmCard.jsx"],"names":["axios","defaults","baseURL","key","getTrendingMovie","a","get","trending","getSearchMovie","query","movie","getMovieById","Id","movieById","getCastById","id","credits","getReviews","reviews","MovieDetailes","styled","div","StyledImg","img","StyledBtn","button","StyledP","p","StyledLink","Link","StyledUl","ul","StyledLi","li","Cast","lazy","FilmReviews","FilmCard","useState","film","setFilm","imgBaseUrl","imgNotFound","movieId","useParams","useRouteMatch","url","path","history","useHistory","location","useLocation","useEffect","then","res","data","genres","date","state","type","onClick","push","from","src","poster_path","alt","original_title","release_date","slice","vote_average","overview","map","genre","name","join","to","pathname","fallback","baseImg","noImg"],"mappings":"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","file":"static/js/FilmCard.ed639b8f.chunk.js","sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst key = '60be8fb8c8a1f350ed6abbd466e696ed';\n\nexport const getTrendingMovie = async () => {\n  const trending = await axios.get(`/trending/movie/week?api_key=${key}`);\n  return trending;\n};\n\nexport const getSearchMovie = async query => {\n  const movie = await axios.get(`/search/movie?api_key=${key}&query=${query}`);\n  return movie;\n};\n\nexport const getMovieById = async Id => {\n  const movieById = await axios.get(\n    `/movie/${Id}?api_key=${key}&language=en-US`,\n  );\n  return movieById;\n};\n\nexport const getCastById = async id => {\n  const credits = await axios.get(\n    `/movie/${id}/credits?api_key=${key}&language=en-US`,\n  );\n  return credits;\n};\n\nexport const getReviews = async id => {\n  const reviews = await axios.get(\n    `/movie/${id}/reviews?api_key=${key}&language=en-US&page=1`,\n  );\n  return reviews;\n};\n","import { Link } from 'react-router-dom';\nimport styled from '@emotion/styled';\n\nexport const MovieDetailes = styled.div`\n  display: flex;\n`;\n\nexport const StyledImg = styled.img`\n  width: 300px;\n  height: auto;\n  border-radius: 15px;\n  margin-bottom: 10px;\n  margin-right: 100px;\n`;\n\nexport const StyledBtn = styled.button`\n  margin: 20px;\n  color: #b8a3b0;\n  background-color: #267a26;\n  font-weight: 700;\n  font-size: 14px;\n  border-radius: 5px;\n  border: none;\n  padding: 5px;\n  cursor: pointer;\n  &:hover,\n  &:focus {\n    background-color: #b8a3b0;\n    color: #267a26;\n  }\n`;\n\nexport const StyledP = styled.p`\n  font-size: 18px;\n`;\n\nexport const StyledLink = styled(Link)`\n  font-size: 16px;\n  text-decoration: none;\n  cursor: pointer;\n  color: #b8a3b0;\n  padding: 5px;\n  border-radius: 5px;\n  background-color: #267a26;\n  &:hover,\n  &:focus {\n    color: #267a26;\n    background-color: #b8a3b0;\n    font-weight: 700;\n  }\n`;\n\nexport const StyledUl = styled.ul`\n  list-style-type: circle;\n`;\n\nexport const StyledLi = styled.li`\n  margin-bottom: 10px;\n  padding: 5px;\n  &:last-child {\n    margin-bottom: 0px;\n  }\n`;\n","import { useState, useEffect, lazy, Suspense } from 'react';\nimport {\n  Switch,\n  Route,\n  useRouteMatch,\n  useParams,\n  useHistory,\n  useLocation,\n} from 'react-router-dom';\nimport { getMovieById } from 'services/apiMovie';\nimport {\n  MovieDetailes,\n  StyledImg,\n  StyledBtn,\n  StyledP,\n  StyledLi,\n  StyledLink,\n  StyledUl,\n} from './FilmCard.styled';\n\nconst Cast = lazy(() => import('../Cast/Cast' /* webpackChunkName: \"Cast\" */));\nconst FilmReviews = lazy(() =>\n  import('../FilmReviews/FilmReviews' /* webpackChunkName: \"FilmReviews\" */),\n);\n\nexport default function FilmCard() {\n  const [film, setFilm] = useState(null);\n\n  const imgBaseUrl = 'https://image.tmdb.org/t/p/w500/';\n\n  const imgNotFound =\n    'https://www.publicdomainpictures.net/pictures/280000/velka/not-found-image-15383864787lu.jpg';\n\n  const { movieId } = useParams();\n  const { url, path } = useRouteMatch();\n  const history = useHistory();\n  const location = useLocation();\n\n  useEffect(() => {\n    getMovieById(movieId).then(res => setFilm(res.data));\n  }, [movieId]);\n\n  const onGoBackClick = () => {\n    history.push(location?.state?.from);\n  };\n\n  const dateNormalize = date => {\n    return date.slice(0, -6);\n  };\n\n  const genresNormalize = genres => {\n    return genres\n      .map(genre => {\n        return genre.name;\n      })\n      .join(', ');\n  };\n\n  return (\n    <>\n      {location?.state && (\n        <StyledBtn type=\"button\" onClick={onGoBackClick}>\n          Go Back\n        </StyledBtn>\n      )}\n      {film && (\n        <MovieDetailes>\n          <StyledImg\n            src={\n              film.poster_path\n                ? `${imgBaseUrl}${film.poster_path}`\n                : imgNotFound\n            }\n            alt={film.original_title}\n          />\n          <div>\n            <h1>\n              {film.original_title} ({dateNormalize(film.release_date)})\n            </h1>\n            <StyledP>User Score: {film.vote_average}</StyledP>\n            <h2>Overview</h2>\n            <StyledP>{film.overview}</StyledP>\n            {film.genres && (\n              <>\n                <h3>Genres</h3>\n                <StyledP>{genresNormalize(film.genres)}</StyledP>\n              </>\n            )}\n          </div>\n        </MovieDetailes>\n      )}\n\n      <div>\n        <h4>Additional informatiom</h4>\n        <StyledUl>\n          <StyledLi>\n            <StyledLink\n              to={{\n                pathname: `${url}/cast`,\n                state: { from: location?.state?.from },\n              }}\n            >\n              Cast\n            </StyledLink>\n          </StyledLi>\n          <li>\n            <StyledLink\n              to={{\n                pathname: `${url}/reviews`,\n                state: { from: location?.state?.from },\n              }}\n            >\n              Reviews\n            </StyledLink>\n          </li>\n        </StyledUl>\n      </div>\n      <Suspense fallback={<h1>LOADING...</h1>}>\n        <Switch>\n          <Route path={`${path}/cast`}>\n            <Cast movieId={movieId} baseImg={imgBaseUrl} noImg={imgNotFound} />\n          </Route>\n          <Route path={`${path}/reviews`}>\n            <FilmReviews movieId={movieId} />\n          </Route>\n        </Switch>\n      </Suspense>\n    </>\n  );\n}\n"],"sourceRoot":""}